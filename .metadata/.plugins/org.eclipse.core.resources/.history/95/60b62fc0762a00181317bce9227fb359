import java.util.*;


public class SwapLexOrder {
	
	String swapLexOrder(String str, int[][] pairs) {
		 
	    int length = str.length();
	    HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();
	    
	    for(int i = 1; i <= length; i++){
	        ArrayList<Integer> neighbor = new ArrayList<Integer>();
	        map.put(i,neighbor);
	    }
	    
	    for(int i = 0 ; i < pairs.length;i++){
	        map.get(pairs[i][0]).add(pairs[i][1]);
	        map.get(pairs[i][1]).add(pairs[i][0]);
	    }
	 
	    HashSet<Integer> visited = new HashSet<Integer>();
	    Queue<Integer> queue = new LinkedList<Integer>();
	    List<Set<Integer>> componentList = new ArrayList<>();
	    
	    for(int i = 1 ; i <= map.size(); i++){
	       
	        if(visited.contains(i))
	           continue;
	       
	        Set<Integer> component = new HashSet<Integer>();
	        queue.add(i);
	        while(queue.size() > 0){
	           int x = queue.remove();
	           visited.add(x); 
	           component.add(x); 
	            
	           ArrayList<Integer> temp = map.get(x);
	           
	            if(temp.size() > 0){
	               int front = temp.get(0);
	               temp.remove(0);
	               queue.add(front);
	               //visited.add(front);
	           }
	           
	       } 
	    
	     if(component.size() >1)   
	      componentList.add(component);
	        
	    }
	    for(Set<Integer> set : componentList){
	    	for(Integer i : set){
	    		System.out.print(" "+ i);
	    	}
	    	System.out.println();
	    }
	    
	    return null;
	}
	
	public static void main(String[] args){
		SwapLexOrder obj = new SwapLexOrder();
		
		String str = "acxrabdz";
		int[][] pairs = {{5,7},{2,7},{1,6}};
		obj.swapLexOrder(str, pairs);
	}

	

}
