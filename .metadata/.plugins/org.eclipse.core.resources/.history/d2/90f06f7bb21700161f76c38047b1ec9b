import java.util.Random;

public class QuickSort {
	
	public static void sort(int[] a) {
	        //StdRandom.shuffle(a);
		    shuffleArray(a);
		    
	        sort(a, 0, a.length - 1);
	       
	    }
	
	
	// quicksort the subarray from a[lo] to a[hi]
    private static void sort(int[] a, int lo, int hi) { 
        if (hi <= lo) return;
        int j = partition(a, lo, hi);
        sort(a, lo, j-1);
        sort(a, j+1, hi);
       
    }
	
    
    private static int partition(int[] a, int lo, int hi) {
        int i = lo;
        int j = hi + 1;
        int v = a[lo];
        while (true) { 

            // find item on lo to swap
            while ((a[++i] < v)){
                if (i == hi) 
                	break;
                }

            // find item on hi to swap
            while ((v < a[--j])){
                if (j == lo) 
                break; 
                }     // redundant since a[lo] acts as sentinel

            // check if pointers cross
            if (i >= j) break;

           // exch(a, i, j);
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }

        // put partitioning item v at a[j]
        //exch(a, lo, j);
        int temp1 = a[lo];
        a[lo] = a[j];
        a[j] = temp1;

        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        System.out.println("Value of j is " +j);
        return j;
    }
	
	
	
	 //Knuth Shuffle
	 static void shuffleArray(int[] ar)
	  {
	    // If running on Java 6 or older, use `new Random()` on RHS here
	    Random rnd = new Random();
	    for (int i = ar.length - 1; i > 0; i--)
	    {
	      int index = rnd.nextInt(i + 1);
	      // Simple swap
	      int a = ar[index];
	      ar[index] = ar[i];
	      ar[i] = a;
	    }
	  }
	
	
	 public  static void printArray(int a[]){
			
	  for(int i = 0; i < a.length;i++){
		 System.out.print( " " + a[i]);
	    }
		System.out.println();
		}
	 
	 
	 public static void main(String[] args){
		 
		 int a[] = {5,4,3,7,18,9};
		 
		 System.out.println("Array before sorting ");
		 
		 printArray(a);
		 
		 sort(a);
		 
		 System.out.println("Array after sorting");
		 
		 printArray(a);
		 
		 }
	 
	 }
